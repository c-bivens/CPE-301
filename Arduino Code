//************************************/
//Name: Corey Bivens, Katherine Kerns
//Assignment: CPE 301 Final Project
//Date: 12/16/23
//************************************/

//onboard read/write pins
#define RDA 0x80 //RX (recieve) pin
#define TBE 0x20 //TX (transmit) pin

//library import
#include <LiquidCrystal.h> //- LCD control
#include <DHT.h> //- humidity/temp sensor
#include <uRTCLib.h> //- real time clock
#include <Stepper.h> //- stepper motor control

//pointers established below for analog, uart, and ports

//Analog Pointers
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;

// UART Pointers - register access
volatile unsigned char *myUCSR0A  = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B  = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C  = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0   = (unsigned int *)0x00C4;
volatile unsigned char *myUDR0    = (unsigned char *)0x00C6;

//PortA Pointers
volatile unsigned char* port_a = (unsigned char*) 0x22; 
volatile unsigned char* ddr_a  = (unsigned char*) 0x21; 
volatile unsigned char* pin_a  = (unsigned char*) 0x20; 

//PortB Pointers
volatile unsigned char* port_b = (unsigned char*) 0x25; 
volatile unsigned char* ddr_b  = (unsigned char*) 0x24; 
volatile unsigned char* pin_b  = (unsigned char*) 0x23;

//PortE Pointers
volatile unsigned char* port_e = (unsigned char*) 0x2E; 
volatile unsigned char* ddr_e  = (unsigned char*) 0x2D; 
volatile unsigned char* pin_e  = (unsigned char*) 0x2C;

//Port H Pointers
volatile unsigned char* port_h = (unsigned char*) 0x102; 
volatile unsigned char* ddr_h  = (unsigned char*) 0x101; 
volatile unsigned char* pin_h  = (unsigned char*) 0x100;

//Port L Pointers
volatile unsigned char* port_l = (unsigned char*) 0x10B; 
volatile unsigned char* ddr_l  = (unsigned char*) 0x10A; 
volatile unsigned char* pin_l  = (unsigned char*) 0x109;

//DHT object
#define DHTPIN A0 //DHT sensor on analog pin 0
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

//LCD object
LiquidCrystal myLCD(30, 31, 5, 4, 3, 32);
//register pin, enable pin, D4-7 pins

//clock object
uRTCLib myRTC(0x68);

//Stepper 
const int stepsPerRevolution = 2038;
Stepper stepMotor = Stepper(stepsPerRevolution, 7, 9, 8, 10);
//(steps per revolution, pins 1-4)

//global variables 
int waterLevel;
float numLoops = 60;
int temperatureThresh = 72;
float humidity;
float temperature;
int waterThresh = 400;

//clock variables
int sec;
int minute;
int hour;

//on/off button variables
int oldState;
int buttonState;

void setup() {
   //start serial communication w baud rate
  U0init(9600);
  
  //analog converter initialize
  adc_init();

  //on/off button
  *ddr_a &= 0b11111110; //set PA0 as input
  *port_a |= 0b00000001; //enable pullup resistor

  //stepper motor inputs
  *ddr_a &= 0b11111101; // PA1 as input
  *port_a |= 0b00000010; //enable pullup resistor
  *ddr_a &= 0b11110111; //PA3 as input
  *port_a |= 0b00001000; //enable pullup resistor

  //fan pin output
  *ddr_l |= 0x01 << 7; //port L pin 7, fan
  
  //LCD pin output
  *ddr_b |= 0x01 << 7; //port B pin 7, LCD
  myLCD.begin(16, 2); //16 columns, 2 rows

  //establish LED output pins ports b-h
  *ddr_b |= 0x01 << 5; //port B pin 5, yellow LED
  *ddr_b |= 0x01 << 6; //port B pin 6, green LED
  *ddr_e |= 0x01 << 4; //port H pin 4, red LED
  *ddr_h |= 0x01 << 3; // port H pin 3, blue LED

  //DHT
  dht.begin();

  //RTC start
  URTCLIB_WIRE.begin();
}

void loop() {
  //time
  myRTC.refresh();

  //get water
  waterLevel = adc_read(5); //analog pin A5

  //check button state
  oldState = buttonState;
  buttonState = A0Read(); //read from pin A0

  //humidity and temperature check
  delay(250);
  if(numLoops == 60) {
    humidity = dht.readHumidity();
    temperature = dht.readTemperature(true);
    numLoops = 0;
  }
  numLoops = numLoops + .25; 
  myLCD.clear();

  //determine appropriate state if button is on
  if(buttonState == HIGH) {
    *port_b &= 0b11011111; //port B pin 5, yellow LED off 
    *port_l &= 0b01111111; //port L pin 7, fan off

    if(waterLevel > waterThresh && temperature <= temperatureThresh) {
      idleState();
    }

    if(waterLevel > waterThresh && temperature > temperatureThresh) {
      runningState();
    }

    if (waterLevel <= waterThresh){
      errorState();
    }
  }

  //disabled state if button is off
  if(buttonState == LOW){
    disabledState();
  }
}

//system state functions: error
void errorState() 
{
  //print error text
  myLCD.setCursor(0,0);
  myLCD.print("ERROR");

  //LED control
  *port_b &= 0b10111111; //port B pin 6 off, green LED
  *port_e |= 0b00010000; //port E pin 4 on,  red LED 
  *port_h &= 0b11110111; //port H pin 3 off, blue LED 
}

//system state functions: running
void runningState() 
{
  
  //LED control
  *port_b &= 0b10111111; //port B pin 6 off, green LED
  *port_e &= 0b11101111; //port E pin 4 off, red LED
  *port_h |= 0b00001000; //port H pin 3 on, blue LED
  
  //LCD control
  myLCD.setCursor(0,0);
  myLCD.print("Hmdty");
  myLCD.print(humidity);
  myLCD.print(" %\t");
  myLCD.setCursor(0,1); //row 2
  myLCD.print(numLoops);
  myLCD.print("s");
  myLCD.print("Temp: "); 
  myLCD.print(temperature);
  myLCD.println(" *F\t");
  
  //fan control - on
  *port_l |= 0b10000000; //port L pin 7/bit 8 on
}

//system state functions: idle
void idleState() 
{
  //LED control
  *port_b |= 0b01000000; //port B pin 6 on, green LED
  *port_e &= 0b11101111; //port E pin 4 off, red LED
  *port_h &= 0b11110111; //port H pin 3 off, blue LED

  //LCD control
  myLCD.setCursor(0, 0); 
  myLCD.print("Hmdty");
  myLCD.print(humidity);
  myLCD.print(" %\t");
  myLCD.print(numLoops);
  myLCD.print("s");
  myLCD.setCursor(0,1); //row 2
  myLCD.print("Temp: "); 
  myLCD.print(temperature);
  myLCD.println(" *F\t");
}

//system state functions: disabled
void disabledState() 
{
  //reset loop count
  numLoops = 0;

  //LED control
  *port_b |= 0b00100000; //port B pin 5 on, yellow LED
  *port_b &= 0b10111111; //port B pin 6 off, red LED
  *port_e &= 0b11101111; //port E pin 4 off, red LED
  *port_h &= 0b11110111; //port H pin 3 off, blue LED
 
  //LCD control
  myLCD.clear();
  
  //fan control - off
  *port_l &= 0b01111111; //port L pin 7/bit 8 off

  //motor control - off
  if(A1Read() == LOW) {
    stepMotor.setSpeed(10);
    stepMotor.step(stepsPerRevolution);
  } else if(A3Read() == LOW) {
    stepMotor.setSpeed(10);
    stepMotor.step(-stepsPerRevolution);
  }
}

int A0Read()
{
  if(*pin_a & 0b00000001) { 
    return HIGH;
  } else {
    return LOW;
  }
}

int A1Read()
{
  if(*pin_a & 0b00000001) { 
    return HIGH;
  } else {
    return LOW;
  }
}

int A3Read()
{
  if(*pin_a & 0b00000001) { 
    return HIGH;
  } else {
    return LOW;
  }
}

void U0init(unsigned long U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}

void adc_init()
{
  // setup the A register
  *my_ADCSRA |= 0b10000000; // set bit   7 to 1 to enable the ADC
  *my_ADCSRA &= 0b11011111; // clear bit 5 to 0 to disable the ADC trigger mode
  *my_ADCSRA &= 0b11110111; // clear bit 3 to 0 to disable the ADC interrupt
  *my_ADCSRA &= 0b11111000; // clear bit 2 to 0 to set prescaler selection to slow reading
  // setup the B register
  *my_ADCSRB &= 0b11110111;  // clear bit 3 to 0 to reset the channel and gain bits
  *my_ADCSRB &= 0b11111000; // clear bit 2-0 to 0 to set free running mode
  // setup the MUX Register
  *my_ADMUX  &= 0b01111111; // clear bit 7 to 0 for AVCC analog reference
  *my_ADMUX  |= 0b01000000; // set bit   6 to 1 for AVCC analog reference
  *my_ADMUX  &= 0b11011111;// clear bit 5 to 0 for right adjust result
  *my_ADMUX  &= 0b11100000;// clear bit 4-0 to 0 to reset the channel and gain bits
}

unsigned int adc_read(unsigned char adc_channel_num)
{
  // clear the channel selection bits (MUX 4:0)
  *my_ADMUX  &= 0b11100000;
  // clear the channel selection bits (MUX 5)
  *my_ADCSRB &= 0b11110111;
  // set the channel number
  if(adc_channel_num > 7)
  {
    // set the channel selection bits, but remove the most significant bit (bit 3)
    adc_channel_num -= 8;
    // set MUX bit 5
    *my_ADCSRB |= 0b00001000;
  }
  // set the channel selection bits
  *my_ADMUX  += adc_channel_num;
  // set bit 6 of ADCSRA to 1 to start a conversion
  *my_ADCSRA |= 0x40;
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register
  return *my_ADC_DATA;
}

void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A&TBE)==0){}; //wait for TBE HIGH
  *myUDR0 = U0pdata; 
}



















